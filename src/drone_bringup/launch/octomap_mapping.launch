<!-- 
  Example launch file for octomap_server mapping: 
  Listens to incoming PointCloud2 data and incrementally builds an octomap. 
  The data is sent out in different representations. 

  Copy this file into your workspace and adjust as needed, see
  www.ros.org/wiki/octomap_server for details  
-->
<launch>
<!--
  <node pkg="point_cloud_converter" type="point2_near" name="point2_near" output="screen" respawn="true">
        <param name="frame_id" type="string" value="map"/>
        <param name="rate" type="double" value="1"/>
        <param name="radius" type="double" value="3"/>
       </node>
-->
<!--
	<node pkg="point_cloud_converter" name="laser_to_point2" type="laser_to_point2.py" 	respawn="true" output="screen
-->
	<node pkg="octomap_server" type="octomap_server_node" name="octomap_server">
		<param name="resolution" value="0.2" />
		<!-- fixed map frame (set to 'map' if SLAM or localization running!) -->
		<param name="frame_id" type="string" value="/map" />
		<!-- maximum range to integrate (speedup!) -->
		<param name="sensor_model/max_range" value="8.0" />
		<!-- height encoding by different colors -->
		<param name="height_map" value="True"/>
		<!-- False if no initial map and for better performance -->
		<param name="latch" value="False"/>
		<!-- Base frame of robot -->
		<param name="base_frame_id" type="string" value="/base_link" />
		<!-- Ground filter -->
		<param name="filter_ground" value="False"/>
		<!-- data source to integrate (PointCloud2) -->
		<remap from="cloud_in" to="/scan_matched_points2" />
	</node>
</launch>
