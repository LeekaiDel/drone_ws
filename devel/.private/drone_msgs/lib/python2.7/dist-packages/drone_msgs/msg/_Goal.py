# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from drone_msgs/Goal.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import drone_msgs.msg
import geometry_msgs.msg

class Goal(genpy.Message):
  _md5sum = "bf6e29cec64ab1c71dda19cb2e5b5f60"
  _type = "drone_msgs/Goal"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """byte POSE=0
byte VEL=1

byte ctr_type
drone_msgs/DronePose pose

================================================================================
MSG: drone_msgs/DronePose
geometry_msgs/Point point
float32 course

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  # Pseudo-constants
  POSE = 0
  VEL = 1

  __slots__ = ['ctr_type','pose']
  _slot_types = ['byte','drone_msgs/DronePose']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ctr_type,pose

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Goal, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.ctr_type is None:
        self.ctr_type = 0
      if self.pose is None:
        self.pose = drone_msgs.msg.DronePose()
    else:
      self.ctr_type = 0
      self.pose = drone_msgs.msg.DronePose()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_b3df().pack(_x.ctr_type, _x.pose.point.x, _x.pose.point.y, _x.pose.point.z, _x.pose.course))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.pose is None:
        self.pose = drone_msgs.msg.DronePose()
      end = 0
      _x = self
      start = end
      end += 29
      (_x.ctr_type, _x.pose.point.x, _x.pose.point.y, _x.pose.point.z, _x.pose.course,) = _get_struct_b3df().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_b3df().pack(_x.ctr_type, _x.pose.point.x, _x.pose.point.y, _x.pose.point.z, _x.pose.course))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.pose is None:
        self.pose = drone_msgs.msg.DronePose()
      end = 0
      _x = self
      start = end
      end += 29
      (_x.ctr_type, _x.pose.point.x, _x.pose.point.y, _x.pose.point.z, _x.pose.course,) = _get_struct_b3df().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_b3df = None
def _get_struct_b3df():
    global _struct_b3df
    if _struct_b3df is None:
        _struct_b3df = struct.Struct("<b3df")
    return _struct_b3df
