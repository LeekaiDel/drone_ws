# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from drone_msgs/DroneInfoArray.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import drone_msgs.msg
import geometry_msgs.msg

class DroneInfoArray(genpy.Message):
  _md5sum = "b567d9a3a60bda150b09c0bcd10bfc14"
  _type = "drone_msgs/DroneInfoArray"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """drone_msgs/DroneInfo[] drones
================================================================================
MSG: drone_msgs/DroneInfo
int8 team_num   # number of team (0,1..n)
int8 id_drone   # id of drone (0,1..n)
int8 id_marker  # number of marker id
float32 health  # health of drone (100%..0%)
string ip
drone_msgs/DronePose pose   # ENU position of drone

================================================================================
MSG: drone_msgs/DronePose
geometry_msgs/Point point
float32 course

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  __slots__ = ['drones']
  _slot_types = ['drone_msgs/DroneInfo[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       drones

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DroneInfoArray, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.drones is None:
        self.drones = []
    else:
      self.drones = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.drones)
      buff.write(_struct_I.pack(length))
      for val1 in self.drones:
        _x = val1
        buff.write(_get_struct_3bf().pack(_x.team_num, _x.id_drone, _x.id_marker, _x.health))
        _x = val1.ip
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v1 = val1.pose
        _v2 = _v1.point
        _x = _v2
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = _v1.course
        buff.write(_get_struct_f().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.drones is None:
        self.drones = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.drones = []
      for i in range(0, length):
        val1 = drone_msgs.msg.DroneInfo()
        _x = val1
        start = end
        end += 7
        (_x.team_num, _x.id_drone, _x.id_marker, _x.health,) = _get_struct_3bf().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.ip = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.ip = str[start:end]
        _v3 = val1.pose
        _v4 = _v3.point
        _x = _v4
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (_v3.course,) = _get_struct_f().unpack(str[start:end])
        self.drones.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.drones)
      buff.write(_struct_I.pack(length))
      for val1 in self.drones:
        _x = val1
        buff.write(_get_struct_3bf().pack(_x.team_num, _x.id_drone, _x.id_marker, _x.health))
        _x = val1.ip
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v5 = val1.pose
        _v6 = _v5.point
        _x = _v6
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = _v5.course
        buff.write(_get_struct_f().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.drones is None:
        self.drones = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.drones = []
      for i in range(0, length):
        val1 = drone_msgs.msg.DroneInfo()
        _x = val1
        start = end
        end += 7
        (_x.team_num, _x.id_drone, _x.id_marker, _x.health,) = _get_struct_3bf().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.ip = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.ip = str[start:end]
        _v7 = val1.pose
        _v8 = _v7.point
        _x = _v8
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (_v7.course,) = _get_struct_f().unpack(str[start:end])
        self.drones.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3bf = None
def _get_struct_3bf():
    global _struct_3bf
    if _struct_3bf is None:
        _struct_3bf = struct.Struct("<3bf")
    return _struct_3bf
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
