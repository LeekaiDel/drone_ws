// Generated by gencpp from file drone_msgs/WindowAngleDir.msg
// DO NOT EDIT!


#ifndef DRONE_MSGS_MESSAGE_WINDOWANGLEDIR_H
#define DRONE_MSGS_MESSAGE_WINDOWANGLEDIR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace drone_msgs
{
template <class ContainerAllocator>
struct WindowAngleDir_
{
  typedef WindowAngleDir_<ContainerAllocator> Type;

  WindowAngleDir_()
    : found_window(false)
    , width_angle(0.0)
    , height_angle(0.0)  {
    }
  WindowAngleDir_(const ContainerAllocator& _alloc)
    : found_window(false)
    , width_angle(0.0)
    , height_angle(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _found_window_type;
  _found_window_type found_window;

   typedef float _width_angle_type;
  _width_angle_type width_angle;

   typedef float _height_angle_type;
  _height_angle_type height_angle;





  typedef boost::shared_ptr< ::drone_msgs::WindowAngleDir_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::drone_msgs::WindowAngleDir_<ContainerAllocator> const> ConstPtr;

}; // struct WindowAngleDir_

typedef ::drone_msgs::WindowAngleDir_<std::allocator<void> > WindowAngleDir;

typedef boost::shared_ptr< ::drone_msgs::WindowAngleDir > WindowAngleDirPtr;
typedef boost::shared_ptr< ::drone_msgs::WindowAngleDir const> WindowAngleDirConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::drone_msgs::WindowAngleDir_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::drone_msgs::WindowAngleDir_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::drone_msgs::WindowAngleDir_<ContainerAllocator1> & lhs, const ::drone_msgs::WindowAngleDir_<ContainerAllocator2> & rhs)
{
  return lhs.found_window == rhs.found_window &&
    lhs.width_angle == rhs.width_angle &&
    lhs.height_angle == rhs.height_angle;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::drone_msgs::WindowAngleDir_<ContainerAllocator1> & lhs, const ::drone_msgs::WindowAngleDir_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace drone_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::drone_msgs::WindowAngleDir_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::drone_msgs::WindowAngleDir_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::drone_msgs::WindowAngleDir_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::drone_msgs::WindowAngleDir_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::drone_msgs::WindowAngleDir_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::drone_msgs::WindowAngleDir_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::drone_msgs::WindowAngleDir_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e706742e1d1f28d3b56545716318772f";
  }

  static const char* value(const ::drone_msgs::WindowAngleDir_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe706742e1d1f28d3ULL;
  static const uint64_t static_value2 = 0xb56545716318772fULL;
};

template<class ContainerAllocator>
struct DataType< ::drone_msgs::WindowAngleDir_<ContainerAllocator> >
{
  static const char* value()
  {
    return "drone_msgs/WindowAngleDir";
  }

  static const char* value(const ::drone_msgs::WindowAngleDir_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::drone_msgs::WindowAngleDir_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool found_window\n"
"float32 width_angle\n"
"float32 height_angle\n"
;
  }

  static const char* value(const ::drone_msgs::WindowAngleDir_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::drone_msgs::WindowAngleDir_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.found_window);
      stream.next(m.width_angle);
      stream.next(m.height_angle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WindowAngleDir_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::drone_msgs::WindowAngleDir_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::drone_msgs::WindowAngleDir_<ContainerAllocator>& v)
  {
    s << indent << "found_window: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.found_window);
    s << indent << "width_angle: ";
    Printer<float>::stream(s, indent + "  ", v.width_angle);
    s << indent << "height_angle: ";
    Printer<float>::stream(s, indent + "  ", v.height_angle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DRONE_MSGS_MESSAGE_WINDOWANGLEDIR_H
