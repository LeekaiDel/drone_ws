// Generated by gencpp from file drone_msgs/DroneInfo.msg
// DO NOT EDIT!


#ifndef DRONE_MSGS_MESSAGE_DRONEINFO_H
#define DRONE_MSGS_MESSAGE_DRONEINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <drone_msgs/DronePose.h>

namespace drone_msgs
{
template <class ContainerAllocator>
struct DroneInfo_
{
  typedef DroneInfo_<ContainerAllocator> Type;

  DroneInfo_()
    : team_num(0)
    , id_drone(0)
    , id_marker(0)
    , health(0.0)
    , ip()
    , pose()  {
    }
  DroneInfo_(const ContainerAllocator& _alloc)
    : team_num(0)
    , id_drone(0)
    , id_marker(0)
    , health(0.0)
    , ip(_alloc)
    , pose(_alloc)  {
  (void)_alloc;
    }



   typedef int8_t _team_num_type;
  _team_num_type team_num;

   typedef int8_t _id_drone_type;
  _id_drone_type id_drone;

   typedef int8_t _id_marker_type;
  _id_marker_type id_marker;

   typedef float _health_type;
  _health_type health;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _ip_type;
  _ip_type ip;

   typedef  ::drone_msgs::DronePose_<ContainerAllocator>  _pose_type;
  _pose_type pose;





  typedef boost::shared_ptr< ::drone_msgs::DroneInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::drone_msgs::DroneInfo_<ContainerAllocator> const> ConstPtr;

}; // struct DroneInfo_

typedef ::drone_msgs::DroneInfo_<std::allocator<void> > DroneInfo;

typedef boost::shared_ptr< ::drone_msgs::DroneInfo > DroneInfoPtr;
typedef boost::shared_ptr< ::drone_msgs::DroneInfo const> DroneInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::drone_msgs::DroneInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::drone_msgs::DroneInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::drone_msgs::DroneInfo_<ContainerAllocator1> & lhs, const ::drone_msgs::DroneInfo_<ContainerAllocator2> & rhs)
{
  return lhs.team_num == rhs.team_num &&
    lhs.id_drone == rhs.id_drone &&
    lhs.id_marker == rhs.id_marker &&
    lhs.health == rhs.health &&
    lhs.ip == rhs.ip &&
    lhs.pose == rhs.pose;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::drone_msgs::DroneInfo_<ContainerAllocator1> & lhs, const ::drone_msgs::DroneInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace drone_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::drone_msgs::DroneInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::drone_msgs::DroneInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::drone_msgs::DroneInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::drone_msgs::DroneInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::drone_msgs::DroneInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::drone_msgs::DroneInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::drone_msgs::DroneInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "142d303be68c1b2c6c6b79486ae3db7b";
  }

  static const char* value(const ::drone_msgs::DroneInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x142d303be68c1b2cULL;
  static const uint64_t static_value2 = 0x6c6b79486ae3db7bULL;
};

template<class ContainerAllocator>
struct DataType< ::drone_msgs::DroneInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "drone_msgs/DroneInfo";
  }

  static const char* value(const ::drone_msgs::DroneInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::drone_msgs::DroneInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 team_num   # number of team (0,1..n)\n"
"int8 id_drone   # id of drone (0,1..n)\n"
"int8 id_marker  # number of marker id\n"
"float32 health  # health of drone (100%..0%)\n"
"string ip\n"
"drone_msgs/DronePose pose   # ENU position of drone\n"
"\n"
"================================================================================\n"
"MSG: drone_msgs/DronePose\n"
"geometry_msgs/Point point\n"
"float32 course\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::drone_msgs::DroneInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::drone_msgs::DroneInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.team_num);
      stream.next(m.id_drone);
      stream.next(m.id_marker);
      stream.next(m.health);
      stream.next(m.ip);
      stream.next(m.pose);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DroneInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::drone_msgs::DroneInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::drone_msgs::DroneInfo_<ContainerAllocator>& v)
  {
    s << indent << "team_num: ";
    Printer<int8_t>::stream(s, indent + "  ", v.team_num);
    s << indent << "id_drone: ";
    Printer<int8_t>::stream(s, indent + "  ", v.id_drone);
    s << indent << "id_marker: ";
    Printer<int8_t>::stream(s, indent + "  ", v.id_marker);
    s << indent << "health: ";
    Printer<float>::stream(s, indent + "  ", v.health);
    s << indent << "ip: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.ip);
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::drone_msgs::DronePose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DRONE_MSGS_MESSAGE_DRONEINFO_H
