// Generated by gencpp from file drone_msgs/LocalPlannerState.msg
// DO NOT EDIT!


#ifndef DRONE_MSGS_MESSAGE_LOCALPLANNERSTATE_H
#define DRONE_MSGS_MESSAGE_LOCALPLANNERSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace drone_msgs
{
template <class ContainerAllocator>
struct LocalPlannerState_
{
  typedef LocalPlannerState_<ContainerAllocator> Type;

  LocalPlannerState_()
    : state(false)
    , max_dist(0.0)
    , k(0.0)  {
    }
  LocalPlannerState_(const ContainerAllocator& _alloc)
    : state(false)
    , max_dist(0.0)
    , k(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _state_type;
  _state_type state;

   typedef float _max_dist_type;
  _max_dist_type max_dist;

   typedef float _k_type;
  _k_type k;





  typedef boost::shared_ptr< ::drone_msgs::LocalPlannerState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::drone_msgs::LocalPlannerState_<ContainerAllocator> const> ConstPtr;

}; // struct LocalPlannerState_

typedef ::drone_msgs::LocalPlannerState_<std::allocator<void> > LocalPlannerState;

typedef boost::shared_ptr< ::drone_msgs::LocalPlannerState > LocalPlannerStatePtr;
typedef boost::shared_ptr< ::drone_msgs::LocalPlannerState const> LocalPlannerStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::drone_msgs::LocalPlannerState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::drone_msgs::LocalPlannerState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::drone_msgs::LocalPlannerState_<ContainerAllocator1> & lhs, const ::drone_msgs::LocalPlannerState_<ContainerAllocator2> & rhs)
{
  return lhs.state == rhs.state &&
    lhs.max_dist == rhs.max_dist &&
    lhs.k == rhs.k;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::drone_msgs::LocalPlannerState_<ContainerAllocator1> & lhs, const ::drone_msgs::LocalPlannerState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace drone_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::drone_msgs::LocalPlannerState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::drone_msgs::LocalPlannerState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::drone_msgs::LocalPlannerState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::drone_msgs::LocalPlannerState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::drone_msgs::LocalPlannerState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::drone_msgs::LocalPlannerState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::drone_msgs::LocalPlannerState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "152bbd8ec6848572b28cbf06443e0c97";
  }

  static const char* value(const ::drone_msgs::LocalPlannerState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x152bbd8ec6848572ULL;
  static const uint64_t static_value2 = 0xb28cbf06443e0c97ULL;
};

template<class ContainerAllocator>
struct DataType< ::drone_msgs::LocalPlannerState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "drone_msgs/LocalPlannerState";
  }

  static const char* value(const ::drone_msgs::LocalPlannerState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::drone_msgs::LocalPlannerState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool state\n"
"float32 max_dist\n"
"float32 k\n"
;
  }

  static const char* value(const ::drone_msgs::LocalPlannerState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::drone_msgs::LocalPlannerState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.state);
      stream.next(m.max_dist);
      stream.next(m.k);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LocalPlannerState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::drone_msgs::LocalPlannerState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::drone_msgs::LocalPlannerState_<ContainerAllocator>& v)
  {
    s << indent << "state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.state);
    s << indent << "max_dist: ";
    Printer<float>::stream(s, indent + "  ", v.max_dist);
    s << indent << "k: ";
    Printer<float>::stream(s, indent + "  ", v.k);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DRONE_MSGS_MESSAGE_LOCALPLANNERSTATE_H
