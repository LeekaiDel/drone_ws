// Generated by gencpp from file drone_msgs/DroneInfoArray.msg
// DO NOT EDIT!


#ifndef DRONE_MSGS_MESSAGE_DRONEINFOARRAY_H
#define DRONE_MSGS_MESSAGE_DRONEINFOARRAY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <drone_msgs/DroneInfo.h>

namespace drone_msgs
{
template <class ContainerAllocator>
struct DroneInfoArray_
{
  typedef DroneInfoArray_<ContainerAllocator> Type;

  DroneInfoArray_()
    : drones()  {
    }
  DroneInfoArray_(const ContainerAllocator& _alloc)
    : drones(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::drone_msgs::DroneInfo_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::drone_msgs::DroneInfo_<ContainerAllocator> >::other >  _drones_type;
  _drones_type drones;





  typedef boost::shared_ptr< ::drone_msgs::DroneInfoArray_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::drone_msgs::DroneInfoArray_<ContainerAllocator> const> ConstPtr;

}; // struct DroneInfoArray_

typedef ::drone_msgs::DroneInfoArray_<std::allocator<void> > DroneInfoArray;

typedef boost::shared_ptr< ::drone_msgs::DroneInfoArray > DroneInfoArrayPtr;
typedef boost::shared_ptr< ::drone_msgs::DroneInfoArray const> DroneInfoArrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::drone_msgs::DroneInfoArray_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::drone_msgs::DroneInfoArray_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::drone_msgs::DroneInfoArray_<ContainerAllocator1> & lhs, const ::drone_msgs::DroneInfoArray_<ContainerAllocator2> & rhs)
{
  return lhs.drones == rhs.drones;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::drone_msgs::DroneInfoArray_<ContainerAllocator1> & lhs, const ::drone_msgs::DroneInfoArray_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace drone_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::drone_msgs::DroneInfoArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::drone_msgs::DroneInfoArray_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::drone_msgs::DroneInfoArray_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::drone_msgs::DroneInfoArray_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::drone_msgs::DroneInfoArray_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::drone_msgs::DroneInfoArray_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::drone_msgs::DroneInfoArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b567d9a3a60bda150b09c0bcd10bfc14";
  }

  static const char* value(const ::drone_msgs::DroneInfoArray_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb567d9a3a60bda15ULL;
  static const uint64_t static_value2 = 0x0b09c0bcd10bfc14ULL;
};

template<class ContainerAllocator>
struct DataType< ::drone_msgs::DroneInfoArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "drone_msgs/DroneInfoArray";
  }

  static const char* value(const ::drone_msgs::DroneInfoArray_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::drone_msgs::DroneInfoArray_<ContainerAllocator> >
{
  static const char* value()
  {
    return "drone_msgs/DroneInfo[] drones\n"
"================================================================================\n"
"MSG: drone_msgs/DroneInfo\n"
"int8 team_num   # number of team (0,1..n)\n"
"int8 id_drone   # id of drone (0,1..n)\n"
"int8 id_marker  # number of marker id\n"
"float32 health  # health of drone (100%..0%)\n"
"string ip\n"
"drone_msgs/DronePose pose   # ENU position of drone\n"
"\n"
"================================================================================\n"
"MSG: drone_msgs/DronePose\n"
"geometry_msgs/Point point\n"
"float32 course\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::drone_msgs::DroneInfoArray_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::drone_msgs::DroneInfoArray_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.drones);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DroneInfoArray_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::drone_msgs::DroneInfoArray_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::drone_msgs::DroneInfoArray_<ContainerAllocator>& v)
  {
    s << indent << "drones[]" << std::endl;
    for (size_t i = 0; i < v.drones.size(); ++i)
    {
      s << indent << "  drones[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::drone_msgs::DroneInfo_<ContainerAllocator> >::stream(s, indent + "    ", v.drones[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DRONE_MSGS_MESSAGE_DRONEINFOARRAY_H
