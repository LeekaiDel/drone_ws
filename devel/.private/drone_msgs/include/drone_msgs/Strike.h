// Generated by gencpp from file drone_msgs/Strike.msg
// DO NOT EDIT!


#ifndef DRONE_MSGS_MESSAGE_STRIKE_H
#define DRONE_MSGS_MESSAGE_STRIKE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace drone_msgs
{
template <class ContainerAllocator>
struct Strike_
{
  typedef Strike_<ContainerAllocator> Type;

  Strike_()
    : id_drone(0)
    , team_num(0)
    , shot(0.0)  {
    }
  Strike_(const ContainerAllocator& _alloc)
    : id_drone(0)
    , team_num(0)
    , shot(0.0)  {
  (void)_alloc;
    }



   typedef int8_t _id_drone_type;
  _id_drone_type id_drone;

   typedef int8_t _team_num_type;
  _team_num_type team_num;

   typedef float _shot_type;
  _shot_type shot;





  typedef boost::shared_ptr< ::drone_msgs::Strike_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::drone_msgs::Strike_<ContainerAllocator> const> ConstPtr;

}; // struct Strike_

typedef ::drone_msgs::Strike_<std::allocator<void> > Strike;

typedef boost::shared_ptr< ::drone_msgs::Strike > StrikePtr;
typedef boost::shared_ptr< ::drone_msgs::Strike const> StrikeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::drone_msgs::Strike_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::drone_msgs::Strike_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::drone_msgs::Strike_<ContainerAllocator1> & lhs, const ::drone_msgs::Strike_<ContainerAllocator2> & rhs)
{
  return lhs.id_drone == rhs.id_drone &&
    lhs.team_num == rhs.team_num &&
    lhs.shot == rhs.shot;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::drone_msgs::Strike_<ContainerAllocator1> & lhs, const ::drone_msgs::Strike_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace drone_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::drone_msgs::Strike_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::drone_msgs::Strike_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::drone_msgs::Strike_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::drone_msgs::Strike_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::drone_msgs::Strike_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::drone_msgs::Strike_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::drone_msgs::Strike_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bc5465527f2e02efe558071ee95658cf";
  }

  static const char* value(const ::drone_msgs::Strike_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbc5465527f2e02efULL;
  static const uint64_t static_value2 = 0xe558071ee95658cfULL;
};

template<class ContainerAllocator>
struct DataType< ::drone_msgs::Strike_<ContainerAllocator> >
{
  static const char* value()
  {
    return "drone_msgs/Strike";
  }

  static const char* value(const ::drone_msgs::Strike_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::drone_msgs::Strike_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 id_drone   # the id of the drone that shoots (0,1..n)\n"
"int8 team_num   # the number of team of the drone that shoots (0,1..n)\n"
"float32 shot  # the force of the shot\n"
;
  }

  static const char* value(const ::drone_msgs::Strike_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::drone_msgs::Strike_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id_drone);
      stream.next(m.team_num);
      stream.next(m.shot);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Strike_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::drone_msgs::Strike_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::drone_msgs::Strike_<ContainerAllocator>& v)
  {
    s << indent << "id_drone: ";
    Printer<int8_t>::stream(s, indent + "  ", v.id_drone);
    s << indent << "team_num: ";
    Printer<int8_t>::stream(s, indent + "  ", v.team_num);
    s << indent << "shot: ";
    Printer<float>::stream(s, indent + "  ", v.shot);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DRONE_MSGS_MESSAGE_STRIKE_H
