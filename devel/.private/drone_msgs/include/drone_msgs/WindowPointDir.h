// Generated by gencpp from file drone_msgs/WindowPointDir.msg
// DO NOT EDIT!


#ifndef DRONE_MSGS_MESSAGE_WINDOWPOINTDIR_H
#define DRONE_MSGS_MESSAGE_WINDOWPOINTDIR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <drone_msgs/DronePose.h>

namespace drone_msgs
{
template <class ContainerAllocator>
struct WindowPointDir_
{
  typedef WindowPointDir_<ContainerAllocator> Type;

  WindowPointDir_()
    : found_window(false)
    , point()  {
    }
  WindowPointDir_(const ContainerAllocator& _alloc)
    : found_window(false)
    , point(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _found_window_type;
  _found_window_type found_window;

   typedef  ::drone_msgs::DronePose_<ContainerAllocator>  _point_type;
  _point_type point;





  typedef boost::shared_ptr< ::drone_msgs::WindowPointDir_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::drone_msgs::WindowPointDir_<ContainerAllocator> const> ConstPtr;

}; // struct WindowPointDir_

typedef ::drone_msgs::WindowPointDir_<std::allocator<void> > WindowPointDir;

typedef boost::shared_ptr< ::drone_msgs::WindowPointDir > WindowPointDirPtr;
typedef boost::shared_ptr< ::drone_msgs::WindowPointDir const> WindowPointDirConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::drone_msgs::WindowPointDir_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::drone_msgs::WindowPointDir_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::drone_msgs::WindowPointDir_<ContainerAllocator1> & lhs, const ::drone_msgs::WindowPointDir_<ContainerAllocator2> & rhs)
{
  return lhs.found_window == rhs.found_window &&
    lhs.point == rhs.point;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::drone_msgs::WindowPointDir_<ContainerAllocator1> & lhs, const ::drone_msgs::WindowPointDir_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace drone_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::drone_msgs::WindowPointDir_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::drone_msgs::WindowPointDir_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::drone_msgs::WindowPointDir_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::drone_msgs::WindowPointDir_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::drone_msgs::WindowPointDir_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::drone_msgs::WindowPointDir_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::drone_msgs::WindowPointDir_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6e775f1bde836c88e4039d51e180cd67";
  }

  static const char* value(const ::drone_msgs::WindowPointDir_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6e775f1bde836c88ULL;
  static const uint64_t static_value2 = 0xe4039d51e180cd67ULL;
};

template<class ContainerAllocator>
struct DataType< ::drone_msgs::WindowPointDir_<ContainerAllocator> >
{
  static const char* value()
  {
    return "drone_msgs/WindowPointDir";
  }

  static const char* value(const ::drone_msgs::WindowPointDir_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::drone_msgs::WindowPointDir_<ContainerAllocator> >
{
  static const char* value()
  {
    return " bool found_window\n"
" drone_msgs/DronePose point\n"
"\n"
"================================================================================\n"
"MSG: drone_msgs/DronePose\n"
"geometry_msgs/Point point\n"
"float32 course\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::drone_msgs::WindowPointDir_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::drone_msgs::WindowPointDir_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.found_window);
      stream.next(m.point);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WindowPointDir_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::drone_msgs::WindowPointDir_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::drone_msgs::WindowPointDir_<ContainerAllocator>& v)
  {
    s << indent << "found_window: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.found_window);
    s << indent << "point: ";
    s << std::endl;
    Printer< ::drone_msgs::DronePose_<ContainerAllocator> >::stream(s, indent + "  ", v.point);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DRONE_MSGS_MESSAGE_WINDOWPOINTDIR_H
