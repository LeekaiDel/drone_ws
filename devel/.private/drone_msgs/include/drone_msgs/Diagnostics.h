// Generated by gencpp from file drone_msgs/Diagnostics.msg
// DO NOT EDIT!


#ifndef DRONE_MSGS_MESSAGE_DIAGNOSTICS_H
#define DRONE_MSGS_MESSAGE_DIAGNOSTICS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <sensor_msgs/NavSatStatus.h>

namespace drone_msgs
{
template <class ContainerAllocator>
struct Diagnostics_
{
  typedef Diagnostics_<ContainerAllocator> Type;

  Diagnostics_()
    : header()
    , armed(false)
    , init_home(false)
    , init_origin(false)
    , gps_send(false)
    , status()
    , mode()
    , battery(0.0)
    , health(0.0)  {
    }
  Diagnostics_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , armed(false)
    , init_home(false)
    , init_origin(false)
    , gps_send(false)
    , status(_alloc)
    , mode(_alloc)
    , battery(0.0)
    , health(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _armed_type;
  _armed_type armed;

   typedef uint8_t _init_home_type;
  _init_home_type init_home;

   typedef uint8_t _init_origin_type;
  _init_origin_type init_origin;

   typedef uint8_t _gps_send_type;
  _gps_send_type gps_send;

   typedef  ::sensor_msgs::NavSatStatus_<ContainerAllocator>  _status_type;
  _status_type status;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _mode_type;
  _mode_type mode;

   typedef float _battery_type;
  _battery_type battery;

   typedef float _health_type;
  _health_type health;





  typedef boost::shared_ptr< ::drone_msgs::Diagnostics_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::drone_msgs::Diagnostics_<ContainerAllocator> const> ConstPtr;

}; // struct Diagnostics_

typedef ::drone_msgs::Diagnostics_<std::allocator<void> > Diagnostics;

typedef boost::shared_ptr< ::drone_msgs::Diagnostics > DiagnosticsPtr;
typedef boost::shared_ptr< ::drone_msgs::Diagnostics const> DiagnosticsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::drone_msgs::Diagnostics_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::drone_msgs::Diagnostics_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::drone_msgs::Diagnostics_<ContainerAllocator1> & lhs, const ::drone_msgs::Diagnostics_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.armed == rhs.armed &&
    lhs.init_home == rhs.init_home &&
    lhs.init_origin == rhs.init_origin &&
    lhs.gps_send == rhs.gps_send &&
    lhs.status == rhs.status &&
    lhs.mode == rhs.mode &&
    lhs.battery == rhs.battery &&
    lhs.health == rhs.health;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::drone_msgs::Diagnostics_<ContainerAllocator1> & lhs, const ::drone_msgs::Diagnostics_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace drone_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::drone_msgs::Diagnostics_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::drone_msgs::Diagnostics_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::drone_msgs::Diagnostics_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::drone_msgs::Diagnostics_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::drone_msgs::Diagnostics_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::drone_msgs::Diagnostics_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::drone_msgs::Diagnostics_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2c87ff1e63a374108ac3dbac9530310f";
  }

  static const char* value(const ::drone_msgs::Diagnostics_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2c87ff1e63a37410ULL;
  static const uint64_t static_value2 = 0x8ac3dbac9530310fULL;
};

template<class ContainerAllocator>
struct DataType< ::drone_msgs::Diagnostics_<ContainerAllocator> >
{
  static const char* value()
  {
    return "drone_msgs/Diagnostics";
  }

  static const char* value(const ::drone_msgs::Diagnostics_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::drone_msgs::Diagnostics_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"bool armed\n"
"bool init_home\n"
"bool init_origin\n"
"bool gps_send\n"
"sensor_msgs/NavSatStatus status\n"
"\n"
"\n"
"string mode\n"
"float32 battery\n"
"\n"
"float32 health  # health of drone (100%..0%)\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: sensor_msgs/NavSatStatus\n"
"# Navigation Satellite fix status for any Global Navigation Satellite System\n"
"\n"
"# Whether to output an augmented fix is determined by both the fix\n"
"# type and the last time differential corrections were received.  A\n"
"# fix is valid when status >= STATUS_FIX.\n"
"\n"
"int8 STATUS_NO_FIX =  -1        # unable to fix position\n"
"int8 STATUS_FIX =      0        # unaugmented fix\n"
"int8 STATUS_SBAS_FIX = 1        # with satellite-based augmentation\n"
"int8 STATUS_GBAS_FIX = 2        # with ground-based augmentation\n"
"\n"
"int8 status\n"
"\n"
"# Bits defining which Global Navigation Satellite System signals were\n"
"# used by the receiver.\n"
"\n"
"uint16 SERVICE_GPS =     1\n"
"uint16 SERVICE_GLONASS = 2\n"
"uint16 SERVICE_COMPASS = 4      # includes BeiDou.\n"
"uint16 SERVICE_GALILEO = 8\n"
"\n"
"uint16 service\n"
;
  }

  static const char* value(const ::drone_msgs::Diagnostics_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::drone_msgs::Diagnostics_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.armed);
      stream.next(m.init_home);
      stream.next(m.init_origin);
      stream.next(m.gps_send);
      stream.next(m.status);
      stream.next(m.mode);
      stream.next(m.battery);
      stream.next(m.health);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Diagnostics_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::drone_msgs::Diagnostics_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::drone_msgs::Diagnostics_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "armed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.armed);
    s << indent << "init_home: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.init_home);
    s << indent << "init_origin: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.init_origin);
    s << indent << "gps_send: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gps_send);
    s << indent << "status: ";
    s << std::endl;
    Printer< ::sensor_msgs::NavSatStatus_<ContainerAllocator> >::stream(s, indent + "  ", v.status);
    s << indent << "mode: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.mode);
    s << indent << "battery: ";
    Printer<float>::stream(s, indent + "  ", v.battery);
    s << indent << "health: ";
    Printer<float>::stream(s, indent + "  ", v.health);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DRONE_MSGS_MESSAGE_DIAGNOSTICS_H
