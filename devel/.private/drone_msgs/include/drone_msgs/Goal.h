// Generated by gencpp from file drone_msgs/Goal.msg
// DO NOT EDIT!


#ifndef DRONE_MSGS_MESSAGE_GOAL_H
#define DRONE_MSGS_MESSAGE_GOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <drone_msgs/DronePose.h>

namespace drone_msgs
{
template <class ContainerAllocator>
struct Goal_
{
  typedef Goal_<ContainerAllocator> Type;

  Goal_()
    : ctr_type(0)
    , pose()  {
    }
  Goal_(const ContainerAllocator& _alloc)
    : ctr_type(0)
    , pose(_alloc)  {
  (void)_alloc;
    }



   typedef int8_t _ctr_type_type;
  _ctr_type_type ctr_type;

   typedef  ::drone_msgs::DronePose_<ContainerAllocator>  _pose_type;
  _pose_type pose;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(POSE)
  #undef POSE
#endif
#if defined(_WIN32) && defined(VEL)
  #undef VEL
#endif

  enum {
    POSE = 0,
    VEL = 1,
  };


  typedef boost::shared_ptr< ::drone_msgs::Goal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::drone_msgs::Goal_<ContainerAllocator> const> ConstPtr;

}; // struct Goal_

typedef ::drone_msgs::Goal_<std::allocator<void> > Goal;

typedef boost::shared_ptr< ::drone_msgs::Goal > GoalPtr;
typedef boost::shared_ptr< ::drone_msgs::Goal const> GoalConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::drone_msgs::Goal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::drone_msgs::Goal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::drone_msgs::Goal_<ContainerAllocator1> & lhs, const ::drone_msgs::Goal_<ContainerAllocator2> & rhs)
{
  return lhs.ctr_type == rhs.ctr_type &&
    lhs.pose == rhs.pose;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::drone_msgs::Goal_<ContainerAllocator1> & lhs, const ::drone_msgs::Goal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace drone_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::drone_msgs::Goal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::drone_msgs::Goal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::drone_msgs::Goal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::drone_msgs::Goal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::drone_msgs::Goal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::drone_msgs::Goal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::drone_msgs::Goal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bf6e29cec64ab1c71dda19cb2e5b5f60";
  }

  static const char* value(const ::drone_msgs::Goal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbf6e29cec64ab1c7ULL;
  static const uint64_t static_value2 = 0x1dda19cb2e5b5f60ULL;
};

template<class ContainerAllocator>
struct DataType< ::drone_msgs::Goal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "drone_msgs/Goal";
  }

  static const char* value(const ::drone_msgs::Goal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::drone_msgs::Goal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "byte POSE=0\n"
"byte VEL=1\n"
"\n"
"byte ctr_type\n"
"drone_msgs/DronePose pose\n"
"\n"
"================================================================================\n"
"MSG: drone_msgs/DronePose\n"
"geometry_msgs/Point point\n"
"float32 course\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::drone_msgs::Goal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::drone_msgs::Goal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ctr_type);
      stream.next(m.pose);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Goal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::drone_msgs::Goal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::drone_msgs::Goal_<ContainerAllocator>& v)
  {
    s << indent << "ctr_type: ";
    Printer<int8_t>::stream(s, indent + "  ", v.ctr_type);
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::drone_msgs::DronePose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DRONE_MSGS_MESSAGE_GOAL_H
